{"id":"t6RP","dependencies":[{"name":"C:\\Users\\jaeds\\Git Projects\\Locicomp\\public-source\\package.json","includedInParent":true,"mtime":1609120493490},{"name":"C:\\Users\\jaeds\\Git Projects\\Locicomp\\public-source\\node_modules\\pako\\package.json","includedInParent":true,"mtime":1609105065760},{"name":"../utils/common","loc":{"line":24,"column":20},"parent":"C:\\Users\\jaeds\\Git Projects\\Locicomp\\public-source\\node_modules\\pako\\lib\\zlib\\trees.js","resolved":"C:\\Users\\jaeds\\Git Projects\\Locicomp\\public-source\\node_modules\\pako\\lib\\utils\\common.js"}],"generated":{"js":"var $t6RP$exports={},$t6RP$var$utils=$parcel$require(\"t6RP\",\"../utils/common\"),$t6RP$var$Z_FIXED=4,$t6RP$var$Z_BINARY=0,$t6RP$var$Z_TEXT=1,$t6RP$var$Z_UNKNOWN=2;function $t6RP$var$zero($){for(var t=$.length;--t>=0;)$[t]=0}var $t6RP$var$STORED_BLOCK=0,$t6RP$var$STATIC_TREES=1,$t6RP$var$DYN_TREES=2,$t6RP$var$MIN_MATCH=3,$t6RP$var$MAX_MATCH=258,$t6RP$var$LENGTH_CODES=29,$t6RP$var$LITERALS=256,$t6RP$var$L_CODES=$t6RP$var$LITERALS+1+$t6RP$var$LENGTH_CODES,$t6RP$var$D_CODES=30,$t6RP$var$BL_CODES=19,$t6RP$var$HEAP_SIZE=2*$t6RP$var$L_CODES+1,$t6RP$var$MAX_BITS=15,$t6RP$var$Buf_size=16,$t6RP$var$MAX_BL_BITS=7,$t6RP$var$END_BLOCK=256,$t6RP$var$REP_3_6=16,$t6RP$var$REPZ_3_10=17,$t6RP$var$REPZ_11_138=18,$t6RP$var$extra_lbits=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],$t6RP$var$extra_dbits=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],$t6RP$var$extra_blbits=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],$t6RP$var$bl_order=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],$t6RP$var$DIST_CODE_LEN=512,$t6RP$var$static_ltree=new Array(2*($t6RP$var$L_CODES+2));$t6RP$var$zero($t6RP$var$static_ltree);var $t6RP$var$static_dtree=new Array(2*$t6RP$var$D_CODES);$t6RP$var$zero($t6RP$var$static_dtree);var $t6RP$var$_dist_code=new Array($t6RP$var$DIST_CODE_LEN);$t6RP$var$zero($t6RP$var$_dist_code);var $t6RP$var$_length_code=new Array($t6RP$var$MAX_MATCH-$t6RP$var$MIN_MATCH+1);$t6RP$var$zero($t6RP$var$_length_code);var $t6RP$var$base_length=new Array($t6RP$var$LENGTH_CODES);$t6RP$var$zero($t6RP$var$base_length);var $t6RP$var$static_l_desc,$t6RP$var$static_d_desc,$t6RP$var$static_bl_desc,$t6RP$var$base_dist=new Array($t6RP$var$D_CODES);function $t6RP$var$StaticTreeDesc($,t,r,e,_){this.static_tree=$,this.extra_bits=t,this.extra_base=r,this.elems=e,this.max_length=_,this.has_stree=$&&$.length}function $t6RP$var$TreeDesc($,t){this.dyn_tree=$,this.max_code=0,this.stat_desc=t}function $t6RP$var$d_code($){return $<256?$t6RP$var$_dist_code[$]:$t6RP$var$_dist_code[256+($>>>7)]}function $t6RP$var$put_short($,t){$.pending_buf[$.pending++]=255&t,$.pending_buf[$.pending++]=t>>>8&255}function $t6RP$var$send_bits($,t,r){$.bi_valid>$t6RP$var$Buf_size-r?($.bi_buf|=t<<$.bi_valid&65535,$t6RP$var$put_short($,$.bi_buf),$.bi_buf=t>>$t6RP$var$Buf_size-$.bi_valid,$.bi_valid+=r-$t6RP$var$Buf_size):($.bi_buf|=t<<$.bi_valid&65535,$.bi_valid+=r)}function $t6RP$var$send_code($,t,r){$t6RP$var$send_bits($,r[2*t],r[2*t+1])}function $t6RP$var$bi_reverse($,t){var r=0;do{r|=1&$,$>>>=1,r<<=1}while(--t>0);return r>>>1}function $t6RP$var$bi_flush($){16===$.bi_valid?($t6RP$var$put_short($,$.bi_buf),$.bi_buf=0,$.bi_valid=0):$.bi_valid>=8&&($.pending_buf[$.pending++]=255&$.bi_buf,$.bi_buf>>=8,$.bi_valid-=8)}function $t6RP$var$gen_bitlen($,t){var r,e,_,a,v,R,P=t.dyn_tree,i=t.max_code,n=t.stat_desc.static_tree,s=t.stat_desc.has_stree,d=t.stat_desc.extra_bits,l=t.stat_desc.extra_base,o=t.stat_desc.max_length,c=0;for(a=0;a<=$t6RP$var$MAX_BITS;a++)$.bl_count[a]=0;for(P[2*$.heap[$.heap_max]+1]=0,r=$.heap_max+1;r<$t6RP$var$HEAP_SIZE;r++)(a=P[2*P[2*(e=$.heap[r])+1]+1]+1)>o&&(a=o,c++),P[2*e+1]=a,e>i||($.bl_count[a]++,v=0,e>=l&&(v=d[e-l]),R=P[2*e],$.opt_len+=R*(a+v),s&&($.static_len+=R*(n[2*e+1]+v)));if(0!==c){do{for(a=o-1;0===$.bl_count[a];)a--;$.bl_count[a]--,$.bl_count[a+1]+=2,$.bl_count[o]--,c-=2}while(c>0);for(a=o;0!==a;a--)for(e=$.bl_count[a];0!==e;)(_=$.heap[--r])>i||(P[2*_+1]!==a&&($.opt_len+=(a-P[2*_+1])*P[2*_],P[2*_+1]=a),e--)}}function $t6RP$var$gen_codes($,t,r){var e,_,a=new Array($t6RP$var$MAX_BITS+1),v=0;for(e=1;e<=$t6RP$var$MAX_BITS;e++)a[e]=v=v+r[e-1]<<1;for(_=0;_<=t;_++){var R=$[2*_+1];0!==R&&($[2*_]=$t6RP$var$bi_reverse(a[R]++,R))}}function $t6RP$var$tr_static_init(){var $,t,r,e,_,a=new Array($t6RP$var$MAX_BITS+1);for(r=0,e=0;e<$t6RP$var$LENGTH_CODES-1;e++)for($t6RP$var$base_length[e]=r,$=0;$<1<<$t6RP$var$extra_lbits[e];$++)$t6RP$var$_length_code[r++]=e;for($t6RP$var$_length_code[r-1]=e,_=0,e=0;e<16;e++)for($t6RP$var$base_dist[e]=_,$=0;$<1<<$t6RP$var$extra_dbits[e];$++)$t6RP$var$_dist_code[_++]=e;for(_>>=7;e<$t6RP$var$D_CODES;e++)for($t6RP$var$base_dist[e]=_<<7,$=0;$<1<<$t6RP$var$extra_dbits[e]-7;$++)$t6RP$var$_dist_code[256+_++]=e;for(t=0;t<=$t6RP$var$MAX_BITS;t++)a[t]=0;for($=0;$<=143;)$t6RP$var$static_ltree[2*$+1]=8,$++,a[8]++;for(;$<=255;)$t6RP$var$static_ltree[2*$+1]=9,$++,a[9]++;for(;$<=279;)$t6RP$var$static_ltree[2*$+1]=7,$++,a[7]++;for(;$<=287;)$t6RP$var$static_ltree[2*$+1]=8,$++,a[8]++;for($t6RP$var$gen_codes($t6RP$var$static_ltree,$t6RP$var$L_CODES+1,a),$=0;$<$t6RP$var$D_CODES;$++)$t6RP$var$static_dtree[2*$+1]=5,$t6RP$var$static_dtree[2*$]=$t6RP$var$bi_reverse($,5);$t6RP$var$static_l_desc=new $t6RP$var$StaticTreeDesc($t6RP$var$static_ltree,$t6RP$var$extra_lbits,$t6RP$var$LITERALS+1,$t6RP$var$L_CODES,$t6RP$var$MAX_BITS),$t6RP$var$static_d_desc=new $t6RP$var$StaticTreeDesc($t6RP$var$static_dtree,$t6RP$var$extra_dbits,0,$t6RP$var$D_CODES,$t6RP$var$MAX_BITS),$t6RP$var$static_bl_desc=new $t6RP$var$StaticTreeDesc(new Array(0),$t6RP$var$extra_blbits,0,$t6RP$var$BL_CODES,$t6RP$var$MAX_BL_BITS)}function $t6RP$var$init_block($){var t;for(t=0;t<$t6RP$var$L_CODES;t++)$.dyn_ltree[2*t]=0;for(t=0;t<$t6RP$var$D_CODES;t++)$.dyn_dtree[2*t]=0;for(t=0;t<$t6RP$var$BL_CODES;t++)$.bl_tree[2*t]=0;$.dyn_ltree[2*$t6RP$var$END_BLOCK]=1,$.opt_len=$.static_len=0,$.last_lit=$.matches=0}function $t6RP$var$bi_windup($){$.bi_valid>8?$t6RP$var$put_short($,$.bi_buf):$.bi_valid>0&&($.pending_buf[$.pending++]=$.bi_buf),$.bi_buf=0,$.bi_valid=0}function $t6RP$var$copy_block($,t,r,e){$t6RP$var$bi_windup($),e&&($t6RP$var$put_short($,r),$t6RP$var$put_short($,~r)),$t6RP$var$utils.arraySet($.pending_buf,$.window,t,r,$.pending),$.pending+=r}function $t6RP$var$smaller($,t,r,e){var _=2*t,a=2*r;return $[_]<$[a]||$[_]===$[a]&&e[t]<=e[r]}function $t6RP$var$pqdownheap($,t,r){for(var e=$.heap[r],_=r<<1;_<=$.heap_len&&(_<$.heap_len&&$t6RP$var$smaller(t,$.heap[_+1],$.heap[_],$.depth)&&_++,!$t6RP$var$smaller(t,e,$.heap[_],$.depth));)$.heap[r]=$.heap[_],r=_,_<<=1;$.heap[r]=e}function $t6RP$var$compress_block($,t,r){var e,_,a,v,R=0;if(0!==$.last_lit)do{e=$.pending_buf[$.d_buf+2*R]<<8|$.pending_buf[$.d_buf+2*R+1],_=$.pending_buf[$.l_buf+R],R++,0===e?$t6RP$var$send_code($,_,t):($t6RP$var$send_code($,(a=$t6RP$var$_length_code[_])+$t6RP$var$LITERALS+1,t),0!==(v=$t6RP$var$extra_lbits[a])&&$t6RP$var$send_bits($,_-=$t6RP$var$base_length[a],v),$t6RP$var$send_code($,a=$t6RP$var$d_code(--e),r),0!==(v=$t6RP$var$extra_dbits[a])&&$t6RP$var$send_bits($,e-=$t6RP$var$base_dist[a],v))}while(R<$.last_lit);$t6RP$var$send_code($,$t6RP$var$END_BLOCK,t)}function $t6RP$var$build_tree($,t){var r,e,_,a=t.dyn_tree,v=t.stat_desc.static_tree,R=t.stat_desc.has_stree,P=t.stat_desc.elems,i=-1;for($.heap_len=0,$.heap_max=$t6RP$var$HEAP_SIZE,r=0;r<P;r++)0!==a[2*r]?($.heap[++$.heap_len]=i=r,$.depth[r]=0):a[2*r+1]=0;for(;$.heap_len<2;)a[2*(_=$.heap[++$.heap_len]=i<2?++i:0)]=1,$.depth[_]=0,$.opt_len--,R&&($.static_len-=v[2*_+1]);for(t.max_code=i,r=$.heap_len>>1;r>=1;r--)$t6RP$var$pqdownheap($,a,r);_=P;do{r=$.heap[1],$.heap[1]=$.heap[$.heap_len--],$t6RP$var$pqdownheap($,a,1),e=$.heap[1],$.heap[--$.heap_max]=r,$.heap[--$.heap_max]=e,a[2*_]=a[2*r]+a[2*e],$.depth[_]=($.depth[r]>=$.depth[e]?$.depth[r]:$.depth[e])+1,a[2*r+1]=a[2*e+1]=_,$.heap[1]=_++,$t6RP$var$pqdownheap($,a,1)}while($.heap_len>=2);$.heap[--$.heap_max]=$.heap[1],$t6RP$var$gen_bitlen($,t),$t6RP$var$gen_codes(a,i,$.bl_count)}function $t6RP$var$scan_tree($,t,r){var e,_,a=-1,v=t[1],R=0,P=7,i=4;for(0===v&&(P=138,i=3),t[2*(r+1)+1]=65535,e=0;e<=r;e++)_=v,v=t[2*(e+1)+1],++R<P&&_===v||(R<i?$.bl_tree[2*_]+=R:0!==_?(_!==a&&$.bl_tree[2*_]++,$.bl_tree[2*$t6RP$var$REP_3_6]++):R<=10?$.bl_tree[2*$t6RP$var$REPZ_3_10]++:$.bl_tree[2*$t6RP$var$REPZ_11_138]++,R=0,a=_,0===v?(P=138,i=3):_===v?(P=6,i=3):(P=7,i=4))}function $t6RP$var$send_tree($,t,r){var e,_,a=-1,v=t[1],R=0,P=7,i=4;for(0===v&&(P=138,i=3),e=0;e<=r;e++)if(_=v,v=t[2*(e+1)+1],!(++R<P&&_===v)){if(R<i)do{$t6RP$var$send_code($,_,$.bl_tree)}while(0!=--R);else 0!==_?(_!==a&&($t6RP$var$send_code($,_,$.bl_tree),R--),$t6RP$var$send_code($,$t6RP$var$REP_3_6,$.bl_tree),$t6RP$var$send_bits($,R-3,2)):R<=10?($t6RP$var$send_code($,$t6RP$var$REPZ_3_10,$.bl_tree),$t6RP$var$send_bits($,R-3,3)):($t6RP$var$send_code($,$t6RP$var$REPZ_11_138,$.bl_tree),$t6RP$var$send_bits($,R-11,7));R=0,a=_,0===v?(P=138,i=3):_===v?(P=6,i=3):(P=7,i=4)}}function $t6RP$var$build_bl_tree($){var t;for($t6RP$var$scan_tree($,$.dyn_ltree,$.l_desc.max_code),$t6RP$var$scan_tree($,$.dyn_dtree,$.d_desc.max_code),$t6RP$var$build_tree($,$.bl_desc),t=$t6RP$var$BL_CODES-1;t>=3&&0===$.bl_tree[2*$t6RP$var$bl_order[t]+1];t--);return $.opt_len+=3*(t+1)+5+5+4,t}function $t6RP$var$send_all_trees($,t,r,e){var _;for($t6RP$var$send_bits($,t-257,5),$t6RP$var$send_bits($,r-1,5),$t6RP$var$send_bits($,e-4,4),_=0;_<e;_++)$t6RP$var$send_bits($,$.bl_tree[2*$t6RP$var$bl_order[_]+1],3);$t6RP$var$send_tree($,$.dyn_ltree,t-1),$t6RP$var$send_tree($,$.dyn_dtree,r-1)}function $t6RP$var$detect_data_type($){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==$.dyn_ltree[2*t])return $t6RP$var$Z_BINARY;if(0!==$.dyn_ltree[18]||0!==$.dyn_ltree[20]||0!==$.dyn_ltree[26])return $t6RP$var$Z_TEXT;for(t=32;t<$t6RP$var$LITERALS;t++)if(0!==$.dyn_ltree[2*t])return $t6RP$var$Z_TEXT;return $t6RP$var$Z_BINARY}$t6RP$var$zero($t6RP$var$base_dist);var $t6RP$var$static_init_done=!1;function $t6RP$var$_tr_init($){$t6RP$var$static_init_done||($t6RP$var$tr_static_init(),$t6RP$var$static_init_done=!0),$.l_desc=new $t6RP$var$TreeDesc($.dyn_ltree,$t6RP$var$static_l_desc),$.d_desc=new $t6RP$var$TreeDesc($.dyn_dtree,$t6RP$var$static_d_desc),$.bl_desc=new $t6RP$var$TreeDesc($.bl_tree,$t6RP$var$static_bl_desc),$.bi_buf=0,$.bi_valid=0,$t6RP$var$init_block($)}function $t6RP$var$_tr_stored_block($,t,r,e){$t6RP$var$send_bits($,($t6RP$var$STORED_BLOCK<<1)+(e?1:0),3),$t6RP$var$copy_block($,t,r,!0)}function $t6RP$var$_tr_align($){$t6RP$var$send_bits($,$t6RP$var$STATIC_TREES<<1,3),$t6RP$var$send_code($,$t6RP$var$END_BLOCK,$t6RP$var$static_ltree),$t6RP$var$bi_flush($)}function $t6RP$var$_tr_flush_block($,t,r,e){var _,a,v=0;$.level>0?($.strm.data_type===$t6RP$var$Z_UNKNOWN&&($.strm.data_type=$t6RP$var$detect_data_type($)),$t6RP$var$build_tree($,$.l_desc),$t6RP$var$build_tree($,$.d_desc),v=$t6RP$var$build_bl_tree($),_=$.opt_len+3+7>>>3,(a=$.static_len+3+7>>>3)<=_&&(_=a)):_=a=r+5,r+4<=_&&-1!==t?$t6RP$var$_tr_stored_block($,t,r,e):$.strategy===$t6RP$var$Z_FIXED||a===_?($t6RP$var$send_bits($,($t6RP$var$STATIC_TREES<<1)+(e?1:0),3),$t6RP$var$compress_block($,$t6RP$var$static_ltree,$t6RP$var$static_dtree)):($t6RP$var$send_bits($,($t6RP$var$DYN_TREES<<1)+(e?1:0),3),$t6RP$var$send_all_trees($,$.l_desc.max_code+1,$.d_desc.max_code+1,v+1),$t6RP$var$compress_block($,$.dyn_ltree,$.dyn_dtree)),$t6RP$var$init_block($),e&&$t6RP$var$bi_windup($)}function $t6RP$var$_tr_tally($,t,r){return $.pending_buf[$.d_buf+2*$.last_lit]=t>>>8&255,$.pending_buf[$.d_buf+2*$.last_lit+1]=255&t,$.pending_buf[$.l_buf+$.last_lit]=255&r,$.last_lit++,0===t?$.dyn_ltree[2*r]++:($.matches++,t--,$.dyn_ltree[2*($t6RP$var$_length_code[r]+$t6RP$var$LITERALS+1)]++,$.dyn_dtree[2*$t6RP$var$d_code(t)]++),$.last_lit===$.lit_bufsize-1}var $t6RP$export$_tr_init=$t6RP$var$_tr_init;$t6RP$exports._tr_init=$t6RP$export$_tr_init;var $t6RP$export$_tr_stored_block=$t6RP$var$_tr_stored_block;$t6RP$exports._tr_stored_block=$t6RP$export$_tr_stored_block;var $t6RP$export$_tr_flush_block=$t6RP$var$_tr_flush_block;$t6RP$exports._tr_flush_block=$t6RP$export$_tr_flush_block;var $t6RP$export$_tr_tally=$t6RP$var$_tr_tally;$t6RP$exports._tr_tally=$t6RP$export$_tr_tally;var $t6RP$export$_tr_align=$t6RP$var$_tr_align;$t6RP$exports._tr_align=$t6RP$export$_tr_align;"},"sourceMaps":null,"error":null,"hash":"8a03831ebb04c29753f9a85fe8ee0520","cacheData":{"env":{},"imports":{"$require$../utils/common":["../utils/common","*"]},"exports":{"_tr_init":"$t6RP$export$_tr_init","_tr_stored_block":"$t6RP$export$_tr_stored_block","_tr_flush_block":"$t6RP$export$_tr_flush_block","_tr_tally":"$t6RP$export$_tr_tally","_tr_align":"$t6RP$export$_tr_align"},"wildcards":[],"sideEffects":true,"isCommonJS":true}}